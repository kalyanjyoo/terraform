# Create IAM Role
resource "aws_iam_role" "eks-master-role" {
  name = "eks-master"

  assume_role_policy = <<POLICY
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Effect": "Allow",
      "Principal": {
        "Service": "eks.amazonaws.com"
      },
      "Action": "sts:AssumeRole"
    }
  ]
}
POLICY
}

# Associate IAM Policy to IAM Role
resource "aws_iam_role_policy_attachment" "eks-AmazonEKSClusterPolicy" {
  policy_arn = "arn:aws:iam::aws:policy/AmazonEKSClusterPolicy"
  role       = aws_iam_role.eks-master-role.name
}

# Create AWS EKS Cluster
resource "aws_eks_cluster" "eks-cluster" {
  name     = "eks-cluster"
  role_arn = aws_iam_role.eks-master-role.arn
  
  vpc_config {
    subnet_ids = [
        aws_subnet.private-subnet-1a.id,
        aws_subnet.private-subnet-1b.id,
        aws_subnet.public-subnet-1a.id,
        aws_subnet.public-subnet-1b.id
    ]  
  }

  depends_on = [aws_iam_role_policy_attachment.eks-AmazonEKSClusterPolicy]
}

# IAM Role for EKS Node Group 
resource "aws_iam_role" "eks-nodegroup-role" {
  name = "eks-nodegroup"

  assume_role_policy = jsonencode({
    Statement = [{
      Action = "sts:AssumeRole"
      Effect = "Allow"
      Principal = {
        Service = "ec2.amazonaws.com"
      }
    }]
    Version = "2012-10-17"
  })
}

resource "aws_iam_role_policy_attachment" "eks-AmazonEKSWorkerNodePolicy" {
  policy_arn = "arn:aws:iam::aws:policy/AmazonEKSWorkerNodePolicy"
  role       = aws_iam_role.eks-nodegroup-role.name
}

resource "aws_iam_role_policy_attachment" "eks-AmazonEKS_CNI_Policy" {
  policy_arn = "arn:aws:iam::aws:policy/AmazonEKS_CNI_Policy"
  role       = aws_iam_role.eks-nodegroup-role.name
}

resource "aws_iam_role_policy_attachment" "eks-AmazonEC2ContainerRegistryReadOnly" {
  policy_arn = "arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly"
  role       = aws_iam_role.eks-nodegroup-role.name
}

# Create AWS EKS Node Group - Private
resource "aws_eks_node_group" "eks-ng-private" {
  cluster_name    = aws_eks_cluster.eks-cluster.name
  node_group_name = "eks-ng-private"
  node_role_arn   = aws_iam_role.eks-nodegroup-role.arn

  subnet_ids = [
    aws_subnet.private-subnet-1a,
    aws_subnet.private-subnet-1b
  ]

  capacity_type = "ON_DEMAND"
  instance_types = ["t2.medium"]
  ami_type = "AL2_x86_64"  
  disk_size = 20

  scaling_config {
    desired_size = 1
    min_size     = 1    
    max_size     = 3
  }

  # Desired max percentage of unavailable worker nodes during node group update.
  update_config {
    max_unavailable = 1    
  }

    depends_on = [
    aws_iam_role_policy_attachment.eks-AmazonEKSWorkerNodePolicy,
    aws_iam_role_policy_attachment.eks-AmazonEKS_CNI_Policy,
    aws_iam_role_policy_attachment.eks-AmazonEC2ContainerRegistryReadOnly,
  ] 
   
  tags = {
    Name = "Private-Node-Group"
  }

}

# Create AWS EKS Node Group - Public
resource "aws_eks_node_group" "eks-ng-public" {
  cluster_name    = aws_eks_cluster.eks-cluster.name
  node_group_name = "eks-ng-public"
  node_role_arn   = aws_iam_role.eks-nodegroup-role.arn

  subnet_ids = [
    aws_subnet.public-subnet-1a,
    aws_subnet.public-subnet-1b
  ]

  capacity_type = "ON_DEMAND"
  instance_types = ["t2.medium"]
  ami_type = "AL2_x86_64"  
  disk_size = 20

  scaling_config {
    desired_size = 1
    min_size     = 1    
    max_size     = 3
  }

  # Desired max percentage of unavailable worker nodes during node group update.
  update_config {
    max_unavailable = 1    
  }

    depends_on = [
    aws_iam_role_policy_attachment.eks-AmazonEKSWorkerNodePolicy,
    aws_iam_role_policy_attachment.eks-AmazonEKS_CNI_Policy,
    aws_iam_role_policy_attachment.eks-AmazonEC2ContainerRegistryReadOnly,
  ] 
   
  tags = {
    Name = "Public-Node-Group"
  }


}
